
-- CODE RESERVED ROM
    SMEM_BASE := 0uh16_A000;
    SMEM_SIZE := 0uh16_4000;
    LAST_SMEM_ADDR := SMEM_BASE + SMEM_SIZE - 0uh16_2;
-- KEY RESERVED ROM
    KMEM_BASE := 0uh16_6A00;
    KMEM_SIZE := 0uh16_001F;
-- STACK RESERVED ROM
    SDATA_BASE := 0uh16_0400;
    SDATA_SIZE := 0uh16_0C00;
-- HMAC OUTPUT RESERVED ROM
    HMAC_BASE := 0uh16_0230;
    HMAC_SIZE := 0uh16_0020;
-- COUNTER 
    CTR_BASE := 0uh16_0270;
    CTR_SIZE := 0uh16_0020;
    LAST_CTR_ADDR := CTR_BASE + CTR_SIZE - 0uh16_2;
-- Program Memory
    AR_BASE := 0uh16_e000;
    AR_SIZE := 0uh16_2000;
    LAST_AR_ADDR := AR_BASE + AR_SIZE - 0uh16_2;
-- Memory storing "Last Modified Time"
    LMT_BASE := 0uh16_0040;
    LMT_SIZE := 0uh16_0020;
    LAST_LMT_ADDR := LMT_BASE + LMT_SIZE - 0uh16_2;
-- TODO: Need the correct address of authentication success
    AUTH_HANDLER := SMEM_BASE + 0uh16_0474;
--
    RESET_HANDLER := 0uh16_0000;

    pc_in_srom := "pc" >= SMEM_BASE & "pc" <= LAST_SMEM_ADDR;
    next_pc_in_srom := next("pc") >= SMEM_BASE & next("pc") <= LAST_SMEM_ADDR;
    access_key := "data_en" & "data_addr" >= KMEM_BASE & "data_addr" < (KMEM_BASE + KMEM_SIZE);

    pc_not_in_srom := !pc_in_srom; 
    daddr_not_in_sdata := "data_addr" < SDATA_BASE | "data_addr" > SDATA_BASE + SDATA_SIZE - 0uh16_1;
    daddr_in_sdata := !daddr_not_in_sdata;
    daddr_not_in_HMAC := "data_addr" < HMAC_BASE | "data_addr" > HMAC_BASE + HMAC_SIZE - 0uh16_1;
    daddr_not_in_ctr := "data_addr" < CTR_BASE | "data_addr" > LAST_CTR_ADDR;

    dma_access_key := "dma_en" & "dma_addr" >= KMEM_BASE & "dma_addr" < (KMEM_BASE + KMEM_SIZE);
    dma_access_X_stack := "dma_en" & "dma_addr" >= SDATA_BASE & "dma_addr" < (SDATA_BASE + SDATA_SIZE);
    dma_write_ctr := "dma_en" & "dma_addr" >= CTR_BASE & "dma_addr" <= LAST_CTR_ADDR;
    
    cpu_mod_ar := "data_wr" & "data_addr" >= AR_BASE & "data_addr" <= LAST_AR_ADDR;
    dma_mod_ar := "dma_en" & "dma_addr" >= AR_BASE & "dma_addr" <= LAST_AR_ADDR;
    cpu_mod_lmt := "data_wr" & "data_addr" >= LMT_BASE & "data_addr" <= LAST_LMT_ADDR;
    dma_mod_lmt := "dma_en" & "dma_addr" >= LMT_BASE & "dma_addr" <= LAST_LMT_ADDR;

	authentication := "pc" = AUTH_HANDLER;
	pc_is_max_SMEM := "pc"= LAST_SMEM_ADDR;

-- Premisses specifications---

-- Reset correctness
LTLSPEC G ("reset" -> (("reset" U "pc" = RESET_HANDLER) | G("reset")));

-- Exclusive Access to Key ---
LTLSPEC G ((!pc_in_srom & access_key) -> "reset");

-- Atomicity Rules: (1) cannot leave in the middle of ROM code and (2) cannot jump into the middle of ROM code ---
LTLSPEC G ( !"reset" & pc_in_srom & !next_pc_in_srom -> "pc" = LAST_SMEM_ADDR | next("reset") );
LTLSPEC G ( !"reset" & !pc_in_srom & next_pc_in_srom -> next("pc") = SMEM_BASE | next("reset") );

-- Exclusive Access to Secure Stack: (1) Only ROM code can read/write the stack and (2) ROM code cannot write outside the stack ---
LTLSPEC G ((pc_not_in_srom & ("data_en" | "data_wr") & daddr_in_sdata) -> "reset");
LTLSPEC G ((pc_in_srom & "data_wr" & daddr_not_in_sdata & daddr_not_in_HMAC & daddr_not_in_ctr) -> "reset");
LTLSPEC G ( "irq" & pc_in_srom -> "reset");

-- Only ROM code can write counter
LTLSPEC G ((pc_not_in_srom & "data_wr" & !daddr_not_in_ctr) -> "reset")

-- DMA cant access the key
LTLSPEC G (dma_access_key -> "reset");

-- DMA write cant happen while in ROM
LTLSPEC G (("dma_en" & pc_in_srom) -> "reset");

-- Disallow any DMA access to the exclusive stack
LTLSPEC G (dma_access_X_stack -> "reset");

-- Disallow any DMA to write counter
LTLSPEC G (dma_write_ctr -> "reset");

-----------------------------

-- RATAb
LTLSPEC G((cpu_mod_lmt | dma_mod_lmt) -> "reset")
LTLSPEC G((!"upLMT" & next("upLMT")) -> next("pc") = AUTH_HANDLER)
LTLSPEC G(
 (cpu_mod_ar | dma_mod_ar | "reset") -> (G(authentication -> "upLMT") | ((authentication -> "upLMT") U (pc_is_max_SMEM  | "reset")))
)
